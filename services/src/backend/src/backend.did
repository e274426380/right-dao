type UserRegisterCommand = record {
    email: text;
    name: text;
    memo: text;
};

type RegisterUserResult = variant {
    Ok: text;
    Err: UserError;
};

type UserResult = variant {
    Ok: UserProfile;
    Err: UserError;
};

type UserError = variant {
    UserNotFound;
    UserAlreadyExists;
    UserAlreadyDisable;
    UserNameTooLong;
    UserEmailInvalid;
    UserBiographyTooLong;
};

type UserProfile = record {
    id : nat64;
    owner : principal;
    email : text;
    name : text;
    avatar_id: nat64;
    avatar_uri: text;
    biography: text;
    interests: vec text;
    memo : text;
    status : UserStatus;
    created_at : nat64;
};

type UserStatus = variant {
    Enable;
    Disable;
};

type UserEditCommand = record {
    email: text;
    name: text;
    avatar_id: nat64;
    avatar_uri: text;
    biography: text;
    interests: vec text;
    memo: text;
    status: UserStatus;
};

type BoolUserResult = variant {
    Ok: bool;
    Err: UserError;
};

type PostProfile = record {
    id: nat64;
    author: principal;
    title: text;
    content: RichText;
    category: Category;
    photos: vec nat64;
    participants: vec text;
    end_time: opt nat64;
    likes_count : nat64;
    ask_for_money : Currency;
    events: vec PostEvent;
    status: PostStatus;
    created_at: nat64;
    updated_at: nat64;
};

type PostCreateCommand = record {
    title: text;
    content: RichText;
    category: text;
    photos: vec nat64;
    participants: vec text;
    end_time: opt nat64;
};

type RichText = record {
    content: text;
    format: text;
};

type Category = variant {
    Tech;
    Law;
    Other;
};

type Currency = record {
    amount : nat64;
    unit: CurrencyUnit;
    decimals : nat8;
};

type CurrencyUnit = variant {
    USDT;
    ICP;
    BTC;
    ETH;
};

type PostStatus = variant {
    Enable;
    Completed;
    Closed;
};

type PostComment = record {
    id: nat64;
    post_id: nat64;
    comment_id: opt nat64;
    content: RichText;
    author: principal;
    created_at: nat64;
    comments: vec PostComment;
};

type PostEvent = record {
    post_id: nat64;
    event_time: nat64;
    description: text;
    author: principal;
    created_at: nat64;
};

type PostPageQuery = record {
    page_num: nat64;
    page_size: nat64;
    querystring: text;
};


type PostEditCommand = record {
    id: nat64;
    title: text;
    content: RichText;
    category: text;
    photos: vec nat64;
    participants: vec text;
    end_time: opt nat64;
    status: text;
};

type PostCommentCommand = record {
    post_id: nat64;
    content: RichText;
};

type CommentCommentCommand = record {
    post_id: nat64;
    comment_id: nat64;
    content: RichText;
};

type PostEventCommand = record {
    post_id: nat64;
    event_time: nat64;
    description: text;
};

type PostIdCommand = record {
    id: nat64;
};

type PostChangeStatusCommand = record {
    id: nat64;
    status: text;
    description: text;
};

type CreatePostResult = variant {
    Ok: nat64;
    Err: PostError;
};

type PostError = variant {
    PostAlreadyExists;
    PostNotFound;
    PostAlreadyCompleted;
    PostUnAuthorizedOperation;
    PostCommentNotFound;
};

type BoolPostResult = variant {
    Ok: bool;
    Err: PostError;
};

type PostPage = record {
   data: vec PostProfile;
   page_num: nat64;
   page_size: nat64;
   total_count: nat64
};

type PostPageResult = variant {
    Ok: PostPage;
    Err: PostError;
};

type PostResult = variant {
    Ok: PostProfile;
    Err: PostError;
};

service : {
 
    "greet": (text) -> (text) query;

    "register_user": (UserRegisterCommand) -> (RegisterUserResult);
    "edit_user" : (UserEditCommand) -> (BoolUserResult);
    "enable_user" : (principal) -> (BoolUserResult);
    "disable_user" : (principal) -> (BoolUserResult);
    "get_user" : (principal) -> (UserResult);
    "get_self" : () -> (UserResult);

    "create_post" : (PostCreateCommand) -> (CreatePostResult);
    "edit_post" : (PostEditCommand) -> (BoolPostResult);
    "change_post_status" : (PostChangeStatusCommand) -> (BoolPostResult);
    "delete_post" : (PostIdCommand) -> (BoolPostResult);
    "get_post" : (PostIdCommand) -> (PostResult);
    "page_posts" : (PostPageQuery) -> (PostPageResult);
    
    "add_post_comment" : (PostCommentCommand) -> (BoolPostResult);
    "add_comment_comment" : (CommentCommentCommand) -> (BoolPostResult);
    "add_post_event" : (PostEventCommand) -> (BoolPostResult);
    "likes_post" : (PostIdCommand) -> (BoolPostResult);

}